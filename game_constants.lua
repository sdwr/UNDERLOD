--debug constants
DEBUG_PROCS = false
DEBUG_SPELLS = false

IS_DEMO = false
DEMO_END_LEVEL = 11

EXPECTED_SAVE_FIELDS = {
  'level',
  'level_list',
  'loop',
  'gold',
  'units',
  'max_units',
  'passives',
  'shop_item_data',
  'locked_state',
  'reroll_shop',
  'times_rerolled',
  'difficulty',
  'perks',
}

USER_STATS = {}
system.load_stats()

--gold
--note that HoG econ check is in arena.lua (gain_gold)
STARTING_GOLD = 5.0
GOLD_PER_ROUND = 6
GOLD_FOR_BOSS_ROUND = {10, 15, 20, 25}
INTEREST_AMOUNT = 0.1
MAX_INTEREST = 3

--gold display at end of round
SUM_PLUSGOLD = 0
LAST_PLUSGOLD = 0

STARTING_REROLL_COST = 1
--values should be 1, 2, 3, 4, 5
REROLL_COST = function (times_rerolled)
  -- return math.min(5, times_rerolled + STARTING_REROLL_COST)
  return STARTING_REROLL_COST
end


NUMBER_OF_ROUNDS = 25
BOSS_ROUND_POWER = 1000
BOSS_ROUNDS = {6, 11, 16, 21, 25}
LEVELS_TO_HEAL_ON_CLEAR = BOSS_ROUNDS

MAX_UNITS = 1
MAX_SET_BONUS_PIECES = 6

--disable multiple characters
PICK_SECOND_CHARACTER = 1
PICK_THIRD_CHARACTER = 1

RALLY_DURATION = 3
RALLY_CIRCLE_OVERSHOOT_DISTANCE = 10
RALLY_CIRCLE_STOP_DISTANCE = 5

BOSS_MASS = 10
SPECIAL_ENEMY_MASS = 1
REGULAR_ENEMY_MASS = 1
CRITTER_MASS = 0.5

TROOP_MASS = 1
TROOP_KNOCKBACK_MASS = 50

function get_damping_by_unit_class(unit_class)
  return DAMPING_BY_UNIT_CLASS[unit_class] or 1
end

DAMPING_BY_UNIT_CLASS = {
  ['boss'] = 6,
  ['special_enemy'] = 1,
  ['regular_enemy'] = 1,
  ['critter'] = 1,
  ['troop'] = 2,
}

LAUNCH_DAMPING = 0.1

-- Friction constants
BOSS_FRICTION = 1
ENEMY_FRICTION = 1
TROOP_FRICTION = 1

LAUNCH_PUSH_FORCE_ENEMY = 30
LAUNCH_PUSH_FORCE_SPECIAL_ENEMY = 50
LAUNCH_PUSH_FORCE_BOSS = 70

ENEMY_KNOCKBACK_FORCE_TROOP_COLLISION = 500
ENEMY_KNOCKBACK_VELOCITY_THRESHOLD = 100
ENEMY_KNOCKBACK_CHAIN_VELOCITY_THRESHOLD = 40
ENEMY_KNOCKBACK_CHAIN_DAMAGE = 10
ENEMY_KNOCKBACK_FORCE_CHAIN_MULTIPLIER = 0.8

ENEMY_KNOCKBACK_VELOCITY_REGAIN_CONTROL_THRESHOLD = 30

LAUNCH_PUSH_FORCE_TROOP_ATTACK = 10
KNOCKBACK_DURATION_TROOP_ATTACK = 0.2

KNOCKBACK_DURATION_BOSS = 1
KNOCKBACK_DURATION_ENEMY = 0.6
KNOCKBACK_DURATION_REGULAR_ENEMY = 0.3
KNOCKBACK_DURATION_SPECIAL_ENEMY = 0.6

BOSS_RESTITUTION = 0.1
SPECIAL_ENEMY_RESTITUTION = 0.5
REGULAR_ENEMY_RESTITUTION = 0.5
CRITTER_RESTITUTION = 0.5

TROOP_RESITUTION = 0.5

ENEMY_CHANCE_TO_TARGET_CRITTER = 0.3

RANDOM_COOLDOWN_VARIANCE = 0.2

ENEMY_HIT_SCALE = 0.3

DELAY_BEFORE_SUCTION = 1
TIME_BETWEEN_WAVES = 1.75
WAVE_SPAWN_WARNING_TIME = 1.25

ITEM_SPAWN_DELAY_INITAL = 0.8
ITEM_SPAWN_DELAY_OFFSET = 0.5

DOOR_OPEN_DELAY = 4
ARENA_END_DELAY = 3



LEVEL_TO_TIER = function(level)
  if level < 6 then
    return 1
  elseif level < 11 then
    return 2
  elseif level < 16 then
    return 3
  else
    return 4
  end
end

--disable perks for now
LEVEL_TO_PERKS = {
  [3] = true,
  [8] = true,
  [13] = true,
  [18] = true,
  [23] = true,
}

UNIT_LEVEL_TO_NUMBER_OF_TROOPS = {
  [0] = 3,
  [1] = 3,
  [2] = 4,
  [3] = 5,
  [4] = 6,
  [5] = 7,
}

MAX_ITEMS = 6

--allow 6 items per level for now
UNIT_LEVEL_TO_NUMBER_OF_ITEMS = {
  [1] = 6,
  [2] = 6,
  [3] = 6,
  [4] = 6,
  [5] = 6,
}

UNIT_LEVEL_TO_LEVELUP_COST = {
  [1] = 5,
  [2] = 10,
  [3] = 15,
  [4] = 20,
}

NUMBER_OF_TROOPS_TO_CHARACTER_COST = {
  [0] = 5,
  [1] = 10,
  [2] = 15,
}


-- unit constants
MELEE_ATTACK_RANGE = 50

AGGRO_RANGE_BOOST = 100


-- Steering and Movement constants
SEEK_DECELERATION = 1.1
SEEK_WEIGHT = 1

TROOP_SEPARATION_RADIUS = 6
TROOP_SEPARATION_WEIGHT = 1

TROOP_SEPARATION_RADIUS_SAME_TEAM = 3
TROOP_SEPARATION_WEIGHT_SAME_TEAM = 3

TROOP_COHESION_MIN_DISTANCE = 2
TROOP_COHESION_WEIGHT = 3


SEPARATION_RADIUS = 10
WANDER_RADIUS = 8
WANDER_DISTANCE = 50
WANDER_JITTER = 5

LOOSE_SEEK_OFFSET = 30
DISTANCE_TO_TARGET_FOR_IDLE = 10


MAX_BOSS_FORCE = 1000
MAX_ENEMY_FORCE = 1000

MAX_TROOP_FORCE = 1000

LAUNCH_MAX_V = 200


-- UI constants
SCROLL_SPEED = 5
MIN_SCROLL_LOCATION = -95
MAX_SCROLL_LOCATION = 0

ARENA_TRANSITION_TIME = 3

STARTING_WAVE_COUNTDOWN_DURATION = 0.7
TOTAL_STARTING_WAVE_DELAY = (3 * STARTING_WAVE_COUNTDOWN_DURATION)

get_starting_wave_countdown_value = function(seconds_remaining)
  local value = math.ceil(seconds_remaining / STARTING_WAVE_COUNTDOWN_DURATION)
  return value
end

SELECTED_PLAYER_LIGHTEN = -0.2

LEVEL_TEXT_HOVER_HEIGHT = 100

ITEM_CARD_TEXT_HOVER_HEIGHT_OFFSET = 30

CHARACTER_CARD_WIDTH = 100
CHARACTER_CARD_HEIGHT = 135
CHARACTER_CARD_SPACING = 15

CHARACTER_CARD_ITEM_X = -(CHARACTER_CARD_WIDTH / 2) + 20
CHARACTER_CARD_ITEM_X_SPACING = 30
CHARACTER_CARD_ITEM_Y = -(CHARACTER_CARD_HEIGHT / 2) + 35
CHARACTER_CARD_ITEM_Y_SPACING = 25

CHARACTER_CARD_PROC_X = -(CHARACTER_CARD_WIDTH / 2) + 20
CHARACTER_CARD_PROC_X_SPACING = 12
CHARACTER_CARD_PROC_Y = (CHARACTER_CARD_HEIGHT / 2) - 115

ARENA_TITLE_TEXT_Y = 60

TRANSITION_DURATION = 1.75
TRANSITION_DURATION_IN_NEW_STATE = 0.9

ITEM_SLOT_LOWER_BOUND = 190
ITEM_SLOT_DISTANCE = 30

ITEM_SLOT_SIZE = 20

ITEM_CARD_WIDTH = 30
ITEM_CARD_HEIGHT = 45

ACHIEVEMENT_SIZE = 50
ACHIEVEMENT_SPACING = 10
ACHIEVEMENTS_PER_ROW = 4

ACH_CLOSE_BUTTON_SIZE = 20

DAMAGE_NUMBERS_SETTING = {
  'off',
  'enemies',
  'friendlies',
  'all',
}
LEFT_BOUND = 0
RIGHT_BOUND = 0
TOP_BOUND = 0
BOTTOM_BOUND = 0

SET_GAME_BOUNDS = function()
  LEFT_BOUND = gw/2 - 0.8*gw/2
  RIGHT_BOUND = gw/2 + 0.8*gw/2
  TOP_BOUND = gh/2 - 0.8*gh/2
  BOTTOM_BOUND = gh/2 + 0.8*gh/2
end

-- Unit constants

MOVEMENT_RANDOM_TIMER = 5
LOOSE_SEEK_RETARGET_TIME = 10

MOVEMENT_TYPE_SEEK = 'seek'
MOVEMENT_TYPE_LOOSE_SEEK = 'loose_seek'
MOVEMENT_TYPE_SEEK_TO_RANGE = 'seek_to_range'
MOVEMENT_TYPE_RANDOM = 'random'
MOVEMENT_TYPE_FLEE = 'flee'
MOVEMENT_TYPE_WANDER = 'wander'
MOVEMENT_TYPE_NONE = 'none'
MOVEMENT_TYPES = {MOVEMENT_TYPE_SEEK, MOVEMENT_TYPE_LOOSE_SEEK, MOVEMENT_TYPE_SEEK_TO_RANGE, MOVEMENT_TYPE_RANDOM, MOVEMENT_TYPE_FLEE, MOVEMENT_TYPE_NONE}

-- Spell constants
LASER_FIRE_TYPES = {'target', 'fixed_angle', 'rotating'}

DAMAGE_TYPE_LIGHTNING = 'lightning'
DAMAGE_TYPE_SHOCK = 'shock'
DAMAGE_TYPE_FIRE = 'fire'
DAMAGE_TYPE_BURN = 'burn'
DAMAGE_TYPE_PHYSICAL = 'physical'
DAMAGE_TYPE_POISON = 'poison'
DAMAGE_TYPE_COLD = 'cold'

DAMAGE_TYPES = {DAMAGE_TYPE_LIGHTNING, DAMAGE_TYPE_FIRE, DAMAGE_TYPE_PHYSICAL, DAMAGE_TYPE_POISON, DAMAGE_TYPE_COLD}